Application
'permanent mailing address',
'Where can we mail your money (by check)?')
'address cannot be left blank' 'required'
    phone = PhoneNumberField('primary phone number',
                             help_text='Cell phone is acceptable')
'phone number cannot be left blank' 'required'
'phone number is invalid' 'invalid'
    psu_email = EmailField('university e-mail address',
                           help_text='This is your psu.edu e-mail',
                           validators=[RegexValidator(r'@psu.edu$')])
            errors['psu_email'] = ('PSU email cannot be left blank',
                                    'required')
    preferred_email = EmailField('preferred e-mail address',
                                 help_text='Leave blank if same as above')
    psu_id = CharField('university ID number',
                       help_text='Nine digits: 9xxxxxxxx',
                       max_length=9,
                       validators=[RegexValidator(r'^(?:9\d{8})?$')])
            errors['psu_id'] = ('PSU ID cannot be left blank',
                                'required')
    outside_pa = BooleanField('out-of-state resident',
                              default=False,
                              help_text='Do you pay out-of-state tuition?')

    # Scholastic information
    cumulative_gpa = DecimalField('cumulative GPA',
            help_text='Cumulative GPA as of the end of last semester',
            errors['cumulative_gpa'] = ('cumulative GPA is required',
                                        'required')
            errors['cumulative_gpa'] = ('cumulative GPA too high/low',
                                        'invalid')
    semester_gpa = DecimalField('semester GPA',
            help_text='Semester GPA for the most recent completed semester',
    in_state_tuition = BooleanField(
            'in-state tuition',
            help_text='Do you pay the reduced tuition rate for PA residents?',
    )


        if self.date_initiated == None:
            errors['date_initiated'] = ('initiation date is required',
                                        'required')
            errors.append(ValidationError({
                    'semester_initiated': ValidationError(
                            'Semester of initiation is in the future',
                            code='invalid'
                    )
            }))
        elif Semester(self.date_initiated) > Semester(self.due_at):
            errors['date_initiated'] = ('initiated date in the future',
                                        'invalid')
                    'semester_graduating': ValidationError(
                            'Semester of graduation is in the past',
                            code='invalid'
                    )
            }))

            errors['cumulative_gpa'] = ('cumulative GPA too high/low',
                                        'invalid')

            if len(self.scholarshipaward_set.all()) < 1:
                key = 'scholarshipaward_set'
                message = 'need to select at least one scholarship award'
                error_dict[key] = ValidationError(message, code='invalid')
