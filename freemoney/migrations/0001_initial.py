# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-28 03:35
from __future__ import unicode_literals

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import freemoney.models.semester
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicantProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('is_first_login', models.BooleanField(help_text='Should this user be asked to change his password?')),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted', models.BooleanField(default=False)),
                ('application_semester', freemoney.models.semester.SemesterField()),
                ('address', models.TextField(help_text='Where can we mail your money (by check)?', verbose_name='permanent mailing address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Cell phone is acceptable', max_length=128, verbose_name='primary phone number')),
                ('psu_email', models.EmailField(help_text='This is your psu.edu e-mail', max_length=254, validators=[django.core.validators.RegexValidator('@psu.edu$')], verbose_name='university e-mail address')),
                ('preferred_email', models.EmailField(help_text='Leave blank if same as above', max_length=254, verbose_name='preferred e-mail address')),
                ('psu_id', models.CharField(help_text='Nine digits: 9xxxxxxxx', max_length=9, validators=[django.core.validators.RegexValidator('^(?:9\\d{8})?$')], verbose_name='university ID number')),
                ('outside_pa', models.BooleanField(default=False, help_text='Do you pay out-of-state tuition?', verbose_name='out-of-state resident')),
                ('semester_initiated', freemoney.models.semester.SemesterField(null=True)),
                ('semester_graduating', freemoney.models.semester.SemesterField(null=True)),
                ('cumulative_gpa', models.DecimalField(decimal_places=2, help_text='Cumulative GPA as of the end of last semester', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('4.00'))], verbose_name='cumulative GPA')),
                ('semester_gpa', models.DecimalField(decimal_places=2, help_text='Semester GPA for the most recent completed semester', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('4.00'))], verbose_name='semester GPA')),
                ('in_state_tuition', models.BooleanField(default=False, help_text='Do you pay the reduced tuition rate for PA residents?', verbose_name='in-state tuition')),
                ('additional_remarks', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='PeerFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(help_text='Is he compatible with our principles? Other brothers?')),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(help_text='List position relative to others')),
                ('identifier', models.SlugField(help_text='Short name for a particular award')),
                ('name', models.CharField(help_text='Display name for an award', max_length=255)),
                ('description', models.TextField(help_text='Full description (archived alongside the application)')),
                ('chosen', models.BooleanField(help_text='Apply for this award?')),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipAwardPrompt',
            fields=[
                ('identifier', models.SlugField(help_text='Short name for a particular award', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Display name for an award', max_length=255)),
                ('description', models.TextField(help_text='Full description of the award')),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipAwardPicker',
            fields=[
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='freemoney.Application')),
            ],
        ),
        migrations.AddField(
            model_name='peerfeedback',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freemoney.Application'),
        ),
        migrations.AddField(
            model_name='peerfeedback',
            name='peer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freemoney.ApplicantProfile'),
        ),
        migrations.AddField(
            model_name='application',
            name='applicant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freemoney.ApplicantProfile'),
        ),
        migrations.AddField(
            model_name='scholarshipaward',
            name='picker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='freemoney.ScholarshipAwardPicker'),
        ),
    ]
